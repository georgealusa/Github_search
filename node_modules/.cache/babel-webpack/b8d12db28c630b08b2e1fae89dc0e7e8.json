{"ast":null,"code":"import { User } from './user';\nimport { Repo } from './repo';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let SearchService = /*#__PURE__*/(() => {\n  class SearchService {\n    constructor(http) {\n      this.http = http;\n      this.user = new User(\"\", \"\", \"\", \"\", \"\", \"\", 0, 0, \"\", \"\", \"\");\n      this.repos = new Repo(\"\", \"\", \"\", new Date(), \"\", \"\");\n    }\n\n    getSearched(username) {\n      let searchUserUrl = 'https://api.github.com/users/' + username + '?access_token='; // let searchUserUrl='https://api.github.com/users/'+username+'?client_id='+environment.CLIENTID ;\n\n      let promise = new Promise((resolve, reject) => {\n        this.http.get(searchUserUrl).toPromise().then(response => {\n          this.user = response;\n          resolve();\n        }, error => {\n          this.user.name = \"We couldn’t find any users with that name\";\n          reject(error);\n        });\n      });\n      return promise;\n    }\n\n    getRepos(username) {\n      let RepoUrl = 'https://api.github.com/users/' + username + '/repos?order=created&sort=asc?access_token=';\n      ;\n      let promise = new Promise((resolve, reject) => {\n        this.http.get(RepoUrl).toPromise().then(response => {\n          this.repos = response; // console.log(this.repo);\n\n          resolve();\n        }, error => {\n          this.repos.name = \"We couldn’t find any repositories matching the name given\";\n          reject(error);\n        });\n      });\n      return promise;\n    }\n\n  }\n\n  SearchService.ɵfac = function SearchService_Factory(t) {\n    return new (t || SearchService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  SearchService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SearchService,\n    factory: SearchService.ɵfac,\n    providedIn: 'root'\n  });\n  return SearchService;\n})();","map":null,"metadata":{},"sourceType":"module"}